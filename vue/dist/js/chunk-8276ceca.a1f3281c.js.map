{"version":3,"sources":["webpack:///./node_modules/codemirror/mode/clike/clike.js","webpack:///./node_modules/codemirror/mode/go/go.js","webpack:///./node_modules/codemirror/mode/python/python.js"],"names":["mod","CodeMirror","Context","indented","column","type","info","align","prev","this","pushContext","state","col","indent","context","popContext","t","typeBefore","stream","pos","prevToken","test","string","slice","typeAtEndOfLine","indentation","isTopScope","words","str","obj","split","i","length","contains","word","propertyIsEnumerable","defineMode","config","parserConfig","curPunc","isDefKeyword","indentUnit","statementIndentUnit","dontAlignCalls","keywords","types","builtin","blockKeywords","defKeywords","atoms","hooks","multiLineStrings","indentStatements","indentSwitch","namespaceSeparator","isPunctuationChar","numberStart","number","isOperatorChar","isIdentifierChar","isReservedIdentifier","tokenBase","ch","next","result","tokenize","tokenString","backUp","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","quote","escaped","end","maybeEnd","maybeEOL","typeFirstDefinitions","eol","startState","basecolumn","startOfLine","token","ctx","sol","eatSpace","style","start","undefined","styleDefs","textAfter","Pass","firstChar","charAt","closing","dontIndentStatements","hook","switchBlock","allmanIndentation","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","cKeywords","cppKeywords","objCKeywords","objCBuiltins","basicCTypes","basicObjCTypes","cTypes","identifier","objCTypes","cBlockKeywords","cDefKeywords","cppHook","peek","pointerHook","_stream","cIsReservedIdentifier","toLowerCase","cpp14Literal","cpp11StringHook","cpp11RawStringDelim","tokenRawString","cppLooksLikeConstructor","lastTwo","exec","tokenAtString","delim","replace","RegExp","def","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","tokenTripleString","tokenNestedComment","depth","tokenKotlinString","tripleString","skipTo","name","modeProps","cx","closeBrackets","pairs","triples","intendSwitch","stringTokenizer","tokenCeylonString","first","toUpperCase","electricChars","wordRegexp","join","wordOperators","commonKeywords","commonBuiltins","top","scopes","concat","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","splice","hangingIndent","myKeywords","myBuiltins","extra_keywords","extra_builtins","py3","version","Number","identifiers","stringPrefixes","builtins","lastToken","scopeOffset","offset","lineOffset","pushPyScope","dedent","errorToken","tokenBaseInner","inFormat","floatLiteral","intLiteral","isFmtString","indexOf","formatStringFactory","tokenStringFactory","delimiter","tokenOuter","substr","singleline","OUTCLASS","tokenNestedExpr","inner","singleLineStringErrors","isString","pop","pushBracketScope","tokenLexer","beginningOfLine","lambda","delimiter_index","external","addErr","scope"],"mappings":"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","file":"js/chunk-8276ceca.a1f3281c.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction Context(indented, column, type, info, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.info = info;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type, info) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\" && type != \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, info, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\nfunction typeBefore(stream, state, pos) {\n  if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n  if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n}\n\nfunction isTopScope(context) {\n  for (;;) {\n    if (!context || context.type == \"top\") return true;\n    if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n    context = context.prev;\n  }\n}\n\nCodeMirror.defineMode(\"clike\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      keywords = parserConfig.keywords || {},\n      types = parserConfig.types || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      defKeywords = parserConfig.defKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false,\n      indentSwitch = parserConfig.indentSwitch !== false,\n      namespaceSeparator = parserConfig.namespaceSeparator,\n      isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n      numberStart = parserConfig.numberStart || /[\\d\\.]/,\n      number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n      isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n      isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n      // An optional function that takes a {string} token and returns true if it\n      // should be treated as a builtin.\n      isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n\n  var curPunc, isDefKeyword;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (numberStart.test(ch)) {\n      stream.backUp(1)\n      if (stream.match(number)) return \"number\"\n      stream.next()\n    }\n    if (isPunctuationChar.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n      return \"operator\";\n    }\n    stream.eatWhile(isIdentifierChar);\n    if (namespaceSeparator) while (stream.match(namespaceSeparator))\n      stream.eatWhile(isIdentifierChar);\n\n    var cur = stream.current();\n    if (contains(keywords, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      if (contains(defKeywords, cur)) isDefKeyword = true;\n      return \"keyword\";\n    }\n    if (contains(types, cur)) return \"type\";\n    if (contains(builtin, cur)\n        || (isReservedIdentifier && isReservedIdentifier(cur))) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (contains(atoms, cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function maybeEOL(stream, state) {\n    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))\n      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos)\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", null, false),\n        indented: 0,\n        startOfLine: true,\n        prevToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) { maybeEOL(stream, state); return null; }\n      curPunc = isDefKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \";\" || curPunc == \":\" || (curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)))\n        while (state.context.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements &&\n               (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\") ||\n                (ctx.type == \"statement\" && curPunc == \"newstatement\"))) {\n        pushContext(state, stream.column(), \"statement\", stream.current());\n      }\n\n      if (style == \"variable\" &&\n          ((state.prevToken == \"def\" ||\n            (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&\n             isTopScope(state.context) && stream.match(/^\\s*\\(/, false)))))\n        style = \"def\";\n\n      if (hooks.token) {\n        var result = hooks.token(stream, state, style);\n        if (result !== undefined) style = result;\n      }\n\n      if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n\n      state.startOfLine = false;\n      state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n      maybeEOL(stream, state);\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      if (parserConfig.dontIndentStatements)\n        while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info))\n          ctx = ctx.prev\n      if (hooks.indent) {\n        var hook = hooks.indent(state, ctx, textAfter, indentUnit);\n        if (typeof hook == \"number\") return hook\n      }\n      var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n        while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev\n        return ctx.indented\n      }\n      if (ctx.type == \"statement\")\n        return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      if (ctx.align && (!dontAlignCalls || ctx.type != \")\"))\n        return ctx.column + (closing ? 0 : 1);\n      if (ctx.type == \")\" && !closing)\n        return ctx.indented + statementIndentUnit;\n\n      return ctx.indented + (closing ? 0 : indentUnit) +\n        (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 0);\n    },\n\n    electricInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  function contains(words, word) {\n    if (typeof words === \"function\") {\n      return words(word);\n    } else {\n      return words.propertyIsEnumerable(word);\n    }\n  }\n  var cKeywords = \"auto if break case register continue return default do sizeof \" +\n    \"static else struct switch extern typedef union for goto while enum const \" +\n    \"volatile inline restrict asm fortran\";\n\n  // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\n  var cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" +\n  \"class compl concept constexpr const_cast decltype delete dynamic_cast \" +\n  \"explicit export final friend import module mutable namespace new noexcept \" +\n  \"not not_eq operator or or_eq override private protected public \" +\n  \"reinterpret_cast requires static_assert static_cast template this \" +\n  \"thread_local throw try typeid typename using virtual xor xor_eq\";\n\n  var objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" +\n  \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" +\n  \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" +\n  \"@public @package @private @protected @required @optional @try @catch @finally @import \" +\n  \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\n\n  var objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" +\n  \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" +\n  \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" +\n  \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\"\n\n  // Do not use this. Use the cTypes function below. This is global just to avoid\n  // excessive calls when cTypes is being called multiple times during a parse.\n  var basicCTypes = words(\"int long char short double float unsigned signed \" +\n    \"void bool\");\n\n  // Do not use this. Use the objCTypes function below. This is global just to avoid\n  // excessive calls when objCTypes is being called multiple times during a parse.\n  var basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\");\n\n  // Returns true if identifier is a \"C\" type.\n  // C type is defined as those that are reserved by the compiler (basicTypes),\n  // and those that end in _t (Reserved by POSIX for types)\n  // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\n  function cTypes(identifier) {\n    return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n  }\n\n  // Returns true if identifier is a \"Objective C\" type.\n  function objCTypes(identifier) {\n    return cTypes(identifier) || contains(basicObjCTypes, identifier);\n  }\n\n  var cBlockKeywords = \"case do else for if switch while struct enum union\";\n  var cDefKeywords = \"struct enum union\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false\n    for (var ch, next = null; ch = stream.peek();) {\n      if (ch == \"\\\\\" && stream.match(/^.$/)) {\n        next = cppHook\n        break\n      } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n        break\n      }\n      stream.next()\n    }\n    state.tokenize = next\n    return \"meta\"\n  }\n\n  function pointerHook(_stream, state) {\n    if (state.prevToken == \"type\") return \"type\";\n    return false;\n  }\n\n  // For C and C++ (and ObjC): identifiers starting with __\n  // or _ followed by a capital letter are reserved for the compiler.\n  function cIsReservedIdentifier(token) {\n    if (!token || token.length < 2) return false;\n    if (token[0] != '_') return false;\n    return (token[1] == '_') || (token[1] !== token[1].toLowerCase());\n  }\n\n  function cpp14Literal(stream) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1);\n    // Raw strings.\n    if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/^\"([^\\s\\\\()]{0,16})\\(/);\n      if (!match) {\n        return false;\n      }\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    }\n    // Unicode strings/chars.\n    if (stream.match(/^(?:u8|u|U|L)/)) {\n      if (stream.match(/^[\"']/, /* eat */ false)) {\n        return \"string\";\n      }\n      return false;\n    }\n    // Ignore this hook.\n    stream.next();\n    return false;\n  }\n\n  function cppLooksLikeConstructor(word) {\n    var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n    return lastTwo && lastTwo[1] == lastTwo[2];\n  }\n\n  // C#-style strings where \"\" escapes a quote.\n  function tokenAtString(stream, state) {\n    var next;\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"string\";\n  }\n\n  // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match)\n      state.tokenize = null;\n    else\n      stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.types);\n    add(mode.builtin);\n    add(mode.atoms);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-csrc\", \"text/x-c\", \"text/x-chdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    defKeywords: words(cDefKeywords),\n    typeFirstDefinitions: true,\n    atoms: words(\"NULL true false\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n    },\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def([\"text/x-c++src\", \"text/x-c++hdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + cppKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords + \" class try catch\"),\n    defKeywords: words(cDefKeywords + \" class namespace\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false NULL nullptr\"),\n    dontIndentStatements: /^template$/,\n    isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-java\", {\n    name: \"clike\",\n    keywords: words(\"abstract assert break case catch class const continue default \" +\n                    \"do else enum extends final finally for goto if implements import \" +\n                    \"instanceof interface native new package private protected public \" +\n                    \"return static strictfp super switch synchronized this throw throws transient \" +\n                    \"try volatile while @interface\"),\n    types: words(\"byte short int long float double boolean char void Boolean Byte Character Double Float \" +\n                 \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n    blockKeywords: words(\"catch class do else finally for if switch try while\"),\n    defKeywords: words(\"class interface enum @interface\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    hooks: {\n      \"@\": function(stream) {\n        // Don't match the @interface keyword.\n        if (stream.match('interface', false)) return false;\n\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    },\n    modeProps: {fold: [\"brace\", \"import\"]}\n  });\n\n  def(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"abstract as async await base break case catch checked class const continue\" +\n                    \" default delegate do else enum event explicit extern finally fixed for\" +\n                    \" foreach goto if implicit in interface internal is lock namespace new\" +\n                    \" operator out override params private protected public readonly ref return sealed\" +\n                    \" sizeof stackalloc static struct switch this throw try typeof unchecked\" +\n                    \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" +\n                    \" global group into join let orderby partial remove select set value var yield\"),\n    types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" +\n                 \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" +\n                 \" UInt64 bool byte char decimal double short int long object\"  +\n                 \" sbyte float string ushort uint ulong\"),\n    blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n    defKeywords: words(\"class interface namespace struct var\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"@\": function(stream, state) {\n        if (stream.eat('\"')) {\n          state.tokenize = tokenAtString;\n          return tokenAtString(stream, state);\n        }\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  function tokenTripleString(stream, state) {\n    var escaped = false;\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"\"\"')) {\n        state.tokenize = null;\n        break;\n      }\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n    return \"string\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null\n            break\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1)\n            return state.tokenize(stream, state)\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1)\n          return state.tokenize(stream, state)\n        }\n      }\n      return \"comment\"\n    }\n  }\n\n  def(\"text/x-scala\", {\n    name: \"clike\",\n    keywords: words(\n      /* scala */\n      \"abstract case catch class def do else extends final finally for forSome if \" +\n      \"implicit import lazy match new null object override package private protected return \" +\n      \"sealed super this throw trait try type val var while with yield _ \" +\n\n      /* package scala */\n      \"assert assume require print println printf readLine readBoolean readByte readShort \" +\n      \"readChar readInt readLong readFloat readDouble\"\n    ),\n    types: words(\n      \"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" +\n      \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" +\n      \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" +\n      \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" +\n      \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"\n    ),\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n    defKeywords: words(\"class enum def object package trait type val var\"),\n    atoms: words(\"true false null\"),\n    indentStatements: false,\n    indentSwitch: false,\n    isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n        if (!stream.match('\"\"')) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      \"=\": function(stream, state) {\n        var cx = state.context\n        if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n          state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev)\n          return \"operator\"\n        } else {\n          return false\n        }\n      },\n\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false\n        state.tokenize = tokenNestedComment(1)\n        return state.tokenize(stream, state)\n      }\n    },\n    modeProps: {closeBrackets: {pairs: '()[]{}\"\"', triples: '\"'}}\n  });\n\n  function tokenKotlinString(tripleString){\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!tripleString && !escaped && stream.match('\"') ) {end = true; break;}\n        if (tripleString && stream.match('\"\"\"')) {end = true; break;}\n        next = stream.next();\n        if(!escaped && next == \"$\" && stream.match('{'))\n          stream.skipTo(\"}\");\n        escaped = !escaped && next == \"\\\\\" && !tripleString;\n      }\n      if (end || !tripleString)\n        state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-kotlin\", {\n    name: \"clike\",\n    keywords: words(\n      /*keywords*/\n      \"package as typealias class interface this super val operator \" +\n      \"var fun for is in This throw return annotation \" +\n      \"break continue object if else while do try when !in !is as? \" +\n\n      /*soft keywords*/\n      \"file import where by get set abstract enum open inner override private public internal \" +\n      \"protected catch finally out final vararg reified dynamic companion constructor init \" +\n      \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" +\n      \"external annotation crossinline const operator infix suspend actual expect setparam value\"\n    ),\n    types: words(\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" +\n      \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" +\n      \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"\n    ),\n    intendSwitch: false,\n    indentStatements: false,\n    multiLineStrings: true,\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n    defKeywords: words(\"class val var object interface fun\"),\n    atoms: words(\"true false null this\"),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '*': function(_stream, state) {\n        return state.prevToken == '.' ? 'variable' : 'operator';\n      },\n      '\"': function(stream, state) {\n        state.tokenize = tokenKotlinString(stream.match('\"\"'));\n        return state.tokenize(stream, state);\n      },\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state)\n      },\n      indent: function(state, ctx, textAfter, indentUnit) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\")\n          return state.indented;\n        if ((state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\") ||\n          state.prevToken == \"variable\" && firstChar == \".\" ||\n          (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\")\n          return indentUnit * 2 + ctx.indented;\n        if (ctx.align && ctx.type == \"}\")\n          return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n      }\n    },\n    modeProps: {closeBrackets: {triples: '\"'}}\n  });\n\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" +\n                    \"sampler1DShadow sampler2DShadow \" +\n                    \"const attribute uniform varying \" +\n                    \"break continue discard return \" +\n                    \"for while do if else struct \" +\n                    \"in out inout\"),\n    types: words(\"float int bool void \" +\n                 \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\n                 \"mat2 mat3 mat4\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" +\n                    \"pow exp log exp2 sqrt inversesqrt \" +\n                    \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\n                    \"length distance dot cross normalize ftransform faceforward \" +\n                    \"reflect refract matrixCompMult \" +\n                    \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\n                    \"equal notEqual any all not \" +\n                    \"texture1D texture1DProj texture1DLod texture1DProjLod \" +\n                    \"texture2D texture2DProj texture2DLod texture2DProjLod \" +\n                    \"texture3D texture3DProj texture3DLod texture3DProjLod \" +\n                    \"textureCube textureCubeLod \" +\n                    \"shadow1D shadow2D shadow1DProj shadow2DProj \" +\n                    \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" +\n                    \"dFdx dFdy fwidth \" +\n                    \"noise1 noise2 noise3 noise4\"),\n    atoms: words(\"true false \" +\n                \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" +\n                \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" +\n                \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" +\n                \"gl_FogCoord gl_PointCoord \" +\n                \"gl_Position gl_PointSize gl_ClipVertex \" +\n                \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" +\n                \"gl_TexCoord gl_FogFragCoord \" +\n                \"gl_FragCoord gl_FrontFacing \" +\n                \"gl_FragData gl_FragDepth \" +\n                \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" +\n                \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" +\n                \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" +\n                \"gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" +\n                \"gl_ProjectionMatrixInverseTranspose \" +\n                \"gl_ModelViewProjectionMatrixInverseTranspose \" +\n                \"gl_TextureMatrixInverseTranspose \" +\n                \"gl_NormalScale gl_DepthRange gl_ClipPlane \" +\n                \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" +\n                \"gl_FrontLightModelProduct gl_BackLightModelProduct \" +\n                \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" +\n                \"gl_FogParameters \" +\n                \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" +\n                \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" +\n                \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" +\n                \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" +\n                \"gl_MaxDrawBuffers\"),\n    indentSwitch: false,\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-nesc\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" +\n                    \"implementation includes interface module new norace nx_struct nx_union post provides \" +\n                    \"signal task uses abstract extends\"),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    atoms: words(\"null true false\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n    dontIndentStatements: /^@.*$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n    },\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec++\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n    dontIndentStatements: /^@.*$|^template$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-squirrel\", {\n    name: \"clike\",\n    keywords: words(\"base break clone continue const default delete enum extends function in class\" +\n                    \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n    types: cTypes,\n    blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n    defKeywords: words(\"function local class\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  // Ceylon Strings need to deal with interpolation\n  var stringTokenizer = null;\n  function tokenCeylonString(type) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!escaped && stream.match('\"') &&\n              (type == \"single\" || stream.match('\"\"'))) {\n          end = true;\n          break;\n        }\n        if (!escaped && stream.match('``')) {\n          stringTokenizer = tokenCeylonString(type);\n          end = true;\n          break;\n        }\n        next = stream.next();\n        escaped = type == \"single\" && !escaped && next == \"\\\\\";\n      }\n      if (end)\n          state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-ceylon\", {\n    name: \"clike\",\n    keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" +\n                    \" exists extends finally for function given if import in interface is let module new\" +\n                    \" nonempty object of out outer package return satisfies super switch then this throw\" +\n                    \" try value void while\"),\n    types: function(word) {\n        // In Ceylon all identifiers that start with an uppercase are types\n        var first = word.charAt(0);\n        return (first === first.toUpperCase() && first !== first.toLowerCase());\n    },\n    blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n    defKeywords: words(\"class dynamic function interface module object package value\"),\n    builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" +\n                   \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n    isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n    isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n    numberStart: /[\\d#$]/,\n    number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n    multiLineStrings: true,\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null larger smaller equal empty finished\"),\n    indentSwitch: false,\n    styleDefs: false,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n          state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n          return state.tokenize(stream, state);\n        },\n      '`': function(stream, state) {\n          if (!stringTokenizer || !stream.match('`')) return false;\n          state.tokenize = stringTokenizer;\n          stringTokenizer = null;\n          return state.tokenize(stream, state);\n        },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      token: function(_stream, state, style) {\n          if ((style == \"variable\" || style == \"type\") &&\n              state.prevToken == \".\") {\n            return \"variable-2\";\n          }\n        }\n    },\n    modeProps: {\n        fold: [\"brace\", \"import\"],\n        closeBrackets: {triples: '\"'}\n    }\n  });\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"go\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n    \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n    \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n    \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n    \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n    \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n    \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n    \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n    \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n    \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n    \"rune\":true\n  };\n\n  var atoms = {\n    \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n    \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n    \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n    \"println\":true, \"real\":true, \"recover\":true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n      }\n      if (end || !(escaped || quote == \"`\"))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        if (ctx.type == \"case\") ctx.type = \"}\";\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"case\") ctx.type = \"case\";\n      else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n      else if (curPunc == ctx.type) popContext(state);\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n        state.context.type = \"}\";\n        return ctx.indented;\n      }\n      var closing = firstChar == ctx.type;\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}):\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-go\", \"go\");\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null :ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state, true)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent += 1;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state), closing = scope.type == textAfter.charAt(0)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"],"sourceRoot":""}